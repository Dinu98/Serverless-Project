service: first-serverless

frameworkVersion: '4'

provider:
  name: aws
  runtime: nodejs20.x
  #Setting default value to dev while also
  #Permitting this value to be overrided
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  memorySize: 512
  timeout: 10
  environment:
    # TEST_VAR: TEST
    # #Combine var
    # #self - yaml file
    # #provider.stage - value we are refering to
    # TEST_VAR_COMBINED: TEST-${self:provider.stage}
    # #Fetching variables from parameter store
    # DB_USERNAME: ${ssm:/db_username_ps}
    # #Pass "noDecrypt" if you don't want the secure string to be decrypted
    # #DB_PASSWORD: ${ssm(noDecrypt):/db_password_ps}
    # DB_PASSWORD: ${ssm:/db_password_ps}
    # DB_USERNAME_SM: ${self:custom.DB_ADMIN_SM.username}
    # DB_PASSWORD_SM: ${self:custom.DB_ADMIN_SM.password}
    # #Loading variables from files
    # DB_USERNAME_FILE: ${file(./config/config.${opt:stage, 'dev'}.json):username}
    # DB_PASSWORD_FILE: ${file(./config/config.${opt:stage, 'dev'}.json):password}
    # #Serverless core variable
    # SLS_VARIABLE: ${sls:instanceId}
    # #AWS standard variable
    # AWS_VARIABLE: ${aws:accountId}
    # #S3:NameOfBucket/NameOfFile
    # S3_VARIABLE: ${s3:serverless-framework-deployments-us-east-1-1c8015fc-54f4/s3Variable.txt}
    # #Variable from another cloud formation
    # CF_SERVICE_ENDPOINT: ${cf:first-serverless-prod.ServiceEndpoint}
    # #Converting string value to bool
    # STR_TO_BOOL_VARIABLE: ${strToBool(${ssm:/ENABLE_DEBUG})}
    USERS_TABLE: ${self:custom.USERS_TABLE_NAME}

plugins:
  - serverless-offline
  - serverless-dotenv-plugin

custom:
  #Need to be defined here because it is stored as a json
  #Serverless framework is not capable of parsing json into env variable yet
  # DB_ADMIN_SM: ${ssm:/aws/reference/secretsmanager/db_admin_sm}
  USERS_TABLE_NAME: usersTable-${opt:stage, self:provider.stage}

functions:
  user:
    handler: functions/user/user.createUser
    description: 'Creates a new user'
    # environment:
    # TEST_VAR_FS: 'TEST_FS'
    # #Loaded from .env using serverless dotenv plugin
    # ENV_USING_PLUGIN: ${env:FROM_ENV}-${self:provider.name}
    events:
      - http:
          path: user
          method: post
          cors: true
    role: customRole
  getUser:
    handler: functions/user/user.getUser
    description: 'Gets an user'
    events:
      - http:
          path: user/{email}
          method: get

resources:
  Resources:
    UsersTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.USERS_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
          - AttributeName: country
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        BillingMode: PROVISIONED
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 10

        GlobalSecondaryIndexes:
          - IndexName: createdAtIndex
            KeySchema:
              - AttributeName: country
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 10
    customRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: MyCustRole-${opt:stage, self:provider.stage}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lamba.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: customRole-${opt:stage, self:provider.stage}
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'
                - Effect: 'Allow'
                  Action:
                    - 'dynamodb:*'
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:dynamodb'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'Fn::Join':
                              - ''
                              - - 'table/'
                                - Ref: UsersTable
